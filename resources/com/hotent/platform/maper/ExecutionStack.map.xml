<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.hotent.platform.model.bpm.ExecutionStack">
	<resultMap id="ExecutionStack" type="com.hotent.platform.model.bpm.ExecutionStack">
		<id property="stackId" column="stackId" jdbcType="NUMERIC"/>
		<result property="nodeId" column="nodeId" jdbcType="VARCHAR"/>
		<result property="nodeName" column="nodeName" jdbcType="VARCHAR"/>
		<result property="startTime" column="startTime" jdbcType="TIMESTAMP"/>
		<result property="endTime" column="endTime" jdbcType="TIMESTAMP"/>
		<result property="assignees" column="assignees" jdbcType="VARCHAR"/>
		<result property="isMultiTask" column="isMultiTask" jdbcType="NUMERIC"/>
		<result property="parentId" column="parentId" jdbcType="NUMERIC"/>
		<result property="actInstId" column="actInstId" jdbcType="VARCHAR"/>
		<result property="taskIds" column="taskIds" jdbcType="VARCHAR"/>
		<result property="nodePath" column="nodePath" jdbcType="VARCHAR"/>
		<result property="depth" column="depth" jdbcType="NUMERIC"/>
		<result property="actDefId" column="actDefId" jdbcType="VARCHAR"/>
		<result property="taskToken" column="taskToken" jdbcType="VARCHAR"/>
	</resultMap>
	
	<sql id="columns">
		stackId,nodeId,nodeName,startTime,endTime,assignees,isMultiTask,parentId,actInstId,taskIds,nodePath,depth,actDefId,taskToken
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(stackId)"> AND stackId  =#{stackId} </if>
			<if test="@Ognl@isNotEmpty(nodeId)"> AND nodeId  LIKE #{nodeId}  </if>
			<if test="@Ognl@isNotEmpty(nodeName)"> AND nodeName  LIKE #{nodeName}  </if>
			<if test="@Ognl@isNotEmpty(startTime)"> AND startTime  =#{startTime} </if>
			<if test="@Ognl@isNotEmpty(endTime)"> AND endTime  =#{endTime} </if>
			<if test="@Ognl@isNotEmpty(assignees)"> AND assignees  LIKE #{assignees}  </if>
			<if test="@Ognl@isNotEmpty(isMultiTask)"> AND isMultiTask  =#{isMultiTask} </if>
			<if test="@Ognl@isNotEmpty(parentId)"> AND parentId  =#{parentId} </if>
			<if test="@Ognl@isNotEmpty(actInstId)"> AND actInstId  LIKE #{actInstId}  </if>
			<if test="@Ognl@isNotEmpty(taskIds)"> AND taskIds  LIKE #{taskIds}  </if>
			<if test="@Ognl@isNotEmpty(nodePath)"> AND nodePath  LIKE #{nodePath}  </if>
			<if test="@Ognl@isNotEmpty(depth)"> AND depth  =#{depth} </if>
		</where>
	</sql>

	<insert id="add" parameterType="com.hotent.platform.model.bpm.ExecutionStack">
		INSERT INTO bpm_exe_stack
		(<include refid="columns"/>)
		VALUES
		(#{stackId,jdbcType=NUMERIC}, #{nodeId,jdbcType=VARCHAR}, #{nodeName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{assignees,jdbcType=VARCHAR}, #{isMultiTask,jdbcType=NUMERIC}, #{parentId,jdbcType=NUMERIC}, #{actInstId,jdbcType=VARCHAR}, #{taskIds,jdbcType=VARCHAR}, #{nodePath,jdbcType=VARCHAR}, #{depth,jdbcType=NUMERIC}, #{actDefId,jdbcType=VARCHAR},#{taskToken,jdbcType=VARCHAR})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM BPM_EXE_STACK 
		WHERE
		stackId=#{stackId}
	</delete>
	
	<delete id="delByActInstId" parameterType="java.lang.String">
		DELETE FROM BPM_EXE_STACK 
		WHERE
		actInstId=#{actInstId}
	</delete>
	
	<delete id="delSubChilds" parameterType="java.util.Map">
		DELETE FROM BPM_EXE_STACK 
		WHERE
		stackId!=#{stackId}
		and nodePath LIKE #{nodePath}
	</delete>

	<update id="update" parameterType="com.hotent.platform.model.bpm.ExecutionStack">
		UPDATE BPM_EXE_STACK SET
		nodeId=#{nodeId,jdbcType=VARCHAR} , 
		nodeName=#{nodeName,jdbcType=VARCHAR} , 
		startTime=#{startTime,jdbcType=TIMESTAMP} , 
		endTime=#{endTime,jdbcType=TIMESTAMP} , 
		assignees=#{assignees,jdbcType=VARCHAR} , 
		isMultiTask=#{isMultiTask,jdbcType=NUMERIC} , 
		parentId=#{parentId,jdbcType=NUMERIC} , 
		actInstId=#{actInstId,jdbcType=VARCHAR} , 
		taskIds=#{taskIds,jdbcType=VARCHAR} , 
		nodePath=#{nodePath,jdbcType=VARCHAR} , 
		depth=#{depth,jdbcType=NUMERIC} , 
		actDefId=#{actDefId,jdbcType=VARCHAR} ,
		taskToken=#{taskToken,jdbcType=VARCHAR}
		WHERE
		stackId=#{stackId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="ExecutionStack">
		SELECT <include refid="columns"/>
		FROM BPM_EXE_STACK
		WHERE
		stackId=#{stackId}
	</select>
	
	<select id="getByLikeNodePath" resultMap="ExecutionStack">
		SELECT * FROM BPM_EXE_STACK WHERE nodePath LIKE #{nodePath} order by depth desc
	</select>
	
	<select id="getAll" resultMap="ExecutionStack">
		SELECT <include refid="columns"/>
		FROM BPM_EXE_STACK   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by stackId  desc
		</if>
	</select>
	
	<select id="getByActInstIdNodeIdToken" resultMap="ExecutionStack">
		SELECT stackId,nodeId,nodeName,startTime,endTime,assignees,isMultiTask,parentId,actInstId,taskIds,nodePath,depth,actDefId,taskToken
		 from BPM_EXE_STACK where actInstId=#{actInstId} and nodeId=#{nodeId} and taskToken=#{taskToken} order by startTime desc
	</select>
	
	<select id="getByActInstIdNodeId" resultMap="ExecutionStack">
		SELECT stackId,nodeId,nodeName,startTime,endTime,assignees,isMultiTask,parentId,actInstId,taskIds,nodePath,depth,actDefId,taskToken
		 from BPM_EXE_STACK where actInstId=#{actInstId} and nodeId=#{nodeId} order by startTime desc
	</select>
	
	<select id="getByActInstIdDepth" resultMap="ExecutionStack">
		SELECT * from BPM_EXE_STACK where actInstId=#{actInstId} and depth=#{depth} order by startTime desc
	</select>
	
	<select id="getByActInstIdDepExStackId" resultMap="ExecutionStack">
		SELECT * from BPM_EXE_STACK where actInstId=#{actInstId} and depth=#{depth} and stackId!=#{stackId} 
	</select>
	
	<select id="getByParentId" resultMap="ExecutionStack" parameterType="java.lang.Long">
		SELECT * from BPM_EXE_STACK where parentId=#{parentId}
	</select>
	
	<select id="getByParentIdAndEndTimeNotNull" resultMap="ExecutionStack" parameterType="java.lang.Long">
		SELECT * from BPM_EXE_STACK where parentId=#{parentId} and endTime is not NULL
	</select>
	
	<update id="udpTaskTokenByTaskIdNodeId">
		update BPM_EXE_STACK set taskToken = #{taskToken} where taskIds=#{taskIds} and nodeId=#{nodeId} 
	</update>

	<delete id="delByActDefId" parameterType="String">
		DELETE FROM BPM_EXE_STACK 
		WHERE
		actDefId=#{actDefId}
	</delete>
	
	<delete id="delByParentfId" parameterType="java.lang.Long">
		DELETE FROM BPM_EXE_STACK 
		WHERE
		parentId=#{parentId}
	</delete>
	
</mapper>
