<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.hotent.platform.model.bpm.TaskRead">
	<resultMap id="TaskRead" type="com.hotent.platform.model.bpm.TaskRead">
		<id property="id" column="ID" jdbcType="NUMERIC"/>
		<result property="actinstid" column="ACTINSTID" jdbcType="NUMERIC"/>
		<result property="taskid" column="TASKID" jdbcType="NUMERIC"/>
		<result property="userid" column="USERID" jdbcType="NUMERIC"/>
		<result property="username" column="USERNAME" jdbcType="VARCHAR"/>
		<result property="createtime" column="CREATETIME" jdbcType="DATE"/>
	</resultMap>

	<sql id="columns">
		ID,ACTINSTID,TASKID,USERID,USERNAME,CREATETIME
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			
			<if test="@Ognl@isNotEmpty(actinstid)"> AND ACTINSTID  =#{actinstid} </if>
			<if test="@Ognl@isNotEmpty(taskid)"> AND TASKID  =#{taskid} </if>
			<if test="@Ognl@isNotEmpty(userid)"> AND USERID  =#{userid} </if>
			<if test="@Ognl@isNotEmpty(username)"> AND USERNAME  LIKE #{username}  </if>
			<if test="@Ognl@isNotEmpty(createtime)"> AND CREATETIME  =#{createtime} </if>
			<if test="@Ognl@isNotEmpty(begincreatetime)"> AND CREATETIME  >=#{begincreatetime,jdbcType=DATE} </if>
			<if test="@Ognl@isNotEmpty(endcreatetime)"> AND CREATETIME <![CDATA[ <=#{endcreatetime,jdbcType=DATE}]]> </if>
		</where>
	</sql>

	<insert id="add" parameterType="com.hotent.platform.model.bpm.TaskRead">
		INSERT INTO BPM_TASK_READ
		(ID,ACTINSTID,TASKID,USERID,USERNAME,CREATETIME)
		VALUES
		(#{id,jdbcType=NUMERIC}, #{actinstid,jdbcType=NUMERIC}, #{taskid,jdbcType=NUMERIC}, #{userid,jdbcType=NUMERIC}, #{username,jdbcType=VARCHAR}, #{createtime,jdbcType=DATE})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM BPM_TASK_READ  WHERE ID=#{id}
	</delete>
	
	<update id="update" parameterType="com.hotent.platform.model.bpm.TaskRead">
		UPDATE BPM_TASK_READ SET
		ACTINSTID=#{actinstid,jdbcType=NUMERIC},
		TASKID=#{taskid,jdbcType=NUMERIC},
		USERID=#{userid,jdbcType=NUMERIC},
		USERNAME=#{username,jdbcType=VARCHAR},
		CREATETIME=#{createtime,jdbcType=DATE}
		WHERE
		ID=#{id}
	</update>
		    
	<select id="getById" parameterType="java.lang.Long" resultMap="TaskRead">
		SELECT <include refid="columns"/>
		FROM BPM_TASK_READ
		WHERE
		ID=#{id}
	</select>
	
	<select id="getAll" resultMap="TaskRead">
		SELECT <include refid="columns"/>
		FROM BPM_TASK_READ   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by ID  desc
		</if>
	</select>
	
	<select id="getTaskRead" resultMap="TaskRead">
		SELECT <include refid="columns"/>
		FROM BPM_TASK_READ
		WHERE
		ACTINSTID=#{actInstId,jdbcType=NUMERIC}
		AND TASKID=#{taskId,jdbcType=NUMERIC}
	</select>
	
	<select id="isTaskRead"  resultType="java.lang.Integer">
		SELECT count(*) amount FROM BPM_TASK_READ WHERE TASKID=#{taskid,jdbcType=NUMERIC} and USERID=#{userid,jdbcType=NUMERIC}
	</select>
		
	
	<delete id="delByActInstId" parameterType="java.lang.Long">
		DELETE FROM BPM_TASK_READ WHERE ACTINSTID=#{actinstid,jdbcType=NUMERIC}
	</delete>
	
	<delete id="delByTaskId" parameterType="java.lang.Long">
		DELETE FROM BPM_TASK_READ WHERE TASKID=#{taskid,jdbcType=NUMERIC}
	</delete>
	
</mapper>
