<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.hotent.platform.model.bpm.TaskSignData">
	<resultMap id="TaskSignData" type="com.hotent.platform.model.bpm.TaskSignData">
		<id property="dataId" column="dataId" jdbcType="NUMERIC"/>
		<result property="actDefId" column="actDefId" jdbcType="VARCHAR"/>
		<result property="actInstId" column="actInstId" jdbcType="VARCHAR"/>
		<result property="nodeName" column="nodeName" jdbcType="VARCHAR"/>
		<result property="nodeId" column="nodeId" jdbcType="VARCHAR"/>
		<result property="taskId" column="taskId" jdbcType="VARCHAR"/>
		<result property="voteUserId" column="voteUserId" jdbcType="VARCHAR"/>
		<result property="voteUserName" column="voteUserName" jdbcType="VARCHAR"/>
		<result property="voteTime" column="voteTime" jdbcType="TIMESTAMP"/>
		<result property="isAgree" column="isAgree" jdbcType="NUMERIC"/>
		<result property="content" column="content" jdbcType="VARCHAR"/>
		<result property="signNums" column="signNums" jdbcType="NUMERIC"/>
		<result property="isCompleted" column="isCompleted" jdbcType="NUMERIC"/>
		<result property="batch" column="batch" jdbcType="NUMERIC"/>
	</resultMap>
	
	<sql id="columns">
		dataId,actDefId,actInstId,nodeName,nodeId,taskId,voteUserId,voteUserName,voteTime,isAgree,content,signNums,isCompleted,batch
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(dataId)"> AND dataId  =#{dataId} </if>
			<if test="@Ognl@isNotEmpty(actInstId)"> AND actInstId = #{actInstId}  </if>
			<if test="@Ognl@isNotEmpty(nodeName)"> AND nodeName  LIKE #{nodeName}  </if>
			<if test="@Ognl@isNotEmpty(nodeId)"> AND nodeId  LIKE #{nodeId}  </if>
			<if test="@Ognl@isNotEmpty(taskId)"> AND taskId  =#{taskId}  </if>
			<if test="@Ognl@isNotEmpty(voteUserId)"> AND voteUserId  =#{voteUserId} </if>
			<if test="@Ognl@isNotEmpty(voteUserName)"> AND voteUserName  LIKE #{voteUserName}  </if>
			<if test="@Ognl@isNotEmpty(voteTime)"> AND voteTime  =#{voteTime} </if>
			<if test="@Ognl@isNotEmpty(isAgree)"> AND isAgree  =#{isAgree} </if>
			<if test="@Ognl@isNotEmpty(content)"> AND content  LIKE #{content}  </if>
			<if test="@Ognl@isNotEmpty(signNums)"> AND signNums  =#{signNums} </if>
			<if test="@Ognl@isNotEmpty(isCompleted)"> AND isCompleted  =#{isCompleted} </if>
		</where>
	</sql>

	<insert id="add" parameterType="com.hotent.platform.model.bpm.TaskSignData">
		INSERT INTO bpm_tksign_data
		(<include refid="columns"/>)
		VALUES
		(#{dataId,jdbcType=NUMERIC}, #{actDefId,jdbcType=VARCHAR}, #{actInstId,jdbcType=VARCHAR}, 
		#{nodeName,jdbcType=VARCHAR}, #{nodeId,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, 
		#{voteUserId,jdbcType=NUMERIC}, #{voteUserName,jdbcType=VARCHAR}, #{voteTime,jdbcType=TIMESTAMP}, 
		#{isAgree,jdbcType=NUMERIC}, #{content,jdbcType=VARCHAR}, #{signNums,jdbcType=NUMERIC},
		 #{isCompleted,jdbcType=NUMERIC}, #{batch,jdbcType=NUMERIC})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM BPM_TKSIGN_DATA 
		WHERE
		dataId=#{dataId}
	</delete>
	
	<update id="update" parameterType="com.hotent.platform.model.bpm.TaskSignData">
		UPDATE bpm_tksign_data SET
		actDefId=#{actDefId,jdbcType=VARCHAR} , 
		actInstId=#{actInstId,jdbcType=VARCHAR} , 
		nodeName=#{nodeName,jdbcType=VARCHAR} , 
		nodeId=#{nodeId,jdbcType=VARCHAR} , 
		taskId=#{taskId,jdbcType=VARCHAR} , 
		voteUserId=#{voteUserId,jdbcType=NUMERIC} , 
		voteUserName=#{voteUserName,jdbcType=VARCHAR} , 
		voteTime=#{voteTime,jdbcType=TIMESTAMP} , 
		isAgree=#{isAgree,jdbcType=NUMERIC} , 
		content=#{content,jdbcType=VARCHAR} , 
		signNums=#{signNums,jdbcType=NUMERIC} , 
		isCompleted=#{isCompleted,jdbcType=NUMERIC},
		batch=#{batch,jdbcType=NUMERIC} 
		WHERE
		dataId=#{dataId}
	</update>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="TaskSignData">
		SELECT <include refid="columns"/>
		FROM BPM_TKSIGN_DATA
		WHERE
		dataId=#{dataId}
	</select>
	
	<select id="getAll" resultMap="TaskSignData">
		SELECT <include refid="columns"/>
		FROM BPM_TKSIGN_DATA   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by dataId  desc
		</if>
	</select>
	

	
	<select id="getByTaskId" parameterType="java.lang.String" resultMap="TaskSignData">
		SELECT * from BPM_TKSIGN_DATA where taskId=#{taskId}
	</select>
	
	<select id="getMaxSignNums" resultType="java.lang.Integer">
		SELECT max(signNums) maxNums from BPM_TKSIGN_DATA where actInstId=#{actInstId} and nodeId=#{nodeId} and isCompleted=#{isCompleted}
		and batch=(select max(batch)
		                  from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId})
	</select>
	
	
	<select id="getAgreeVoteCount" resultType="java.lang.Integer">
		SELECT count(*) totalVotes from BPM_TKSIGN_DATA where actInstId=#{actInstId} and nodeId=#{nodeId} and isCompleted=0 and isAgree=1
		and batch=(select max(batch)
		                  from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId})
	</select>
	
	<select id="getRefuseVoteCount" resultType="java.lang.Integer">
		SELECT count(*) totalVotes from BPM_TKSIGN_DATA where actInstId=#{actInstId} and nodeId=#{nodeId} and isCompleted=0 and isAgree=2
		and batch=(select max(batch)
		                  from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId})
	</select>
	
	<select id="getAbortVoteCount" resultType="java.lang.Integer">
		SELECT count(*) totalVotes from BPM_TKSIGN_DATA where actInstId=#{actInstId} and nodeId=#{nodeId} and isCompleted=0 and isAgree=0
		and batch=(select max(batch)
		                  from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId})
	</select>
	
	<update id="updateCompleted">
		update BPM_TKSIGN_DATA set isCompleted=1 where actInstId=#{actInstId} and nodeId=#{nodeId} and isCompleted=0
		and batch = (select max(a.batch)
		                  from (select b.* from BPM_TKSIGN_DATA  b)  a
		                 where a.actinstid = #{actInstId}
		                   and a.nodeid = #{nodeId})
	</update>
	
	<select id="getUserTaskSign" resultMap="TaskSignData">
		SELECT * from BPM_TKSIGN_DATA where actInstId=#{actInstId} and nodeId=#{nodeId}  and voteUserId=#{voteUserId}  and isCompleted=0
		and batch=(select max(batch)
		                  from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId})
		 order by voteTime desc
	</select>
	
	<delete id="delByIdActDefId" parameterType="String">
		DELETE FROM BPM_TKSIGN_DATA 
		WHERE
		actDefId=#{actDefId}
	</delete>
	
	<select id="getByNodeAndInstanceId" resultMap="TaskSignData">
		select *
		from BPM_TKSIGN_DATA
		where actinstid = #{actInstId}
		and nodeid = #{nodeId}
		<if test="@Ognl@isNotEmpty(isComplete)"> AND iscompleted  =#{isComplete} </if>
		and batch = (select max(batch)
					from BPM_TKSIGN_DATA
					where actinstid = #{actInstId}
					and nodeid = #{nodeId}) order by signNums
	</select>
	
	<select id="getMaxBatch" resultType="java.lang.Integer">
		select max(batch) batch from BPM_TKSIGN_DATA
		                 where actinstid = #{actInstId}
		                   and nodeid = #{nodeId}
	</select>
	
</mapper>
